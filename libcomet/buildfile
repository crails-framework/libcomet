# Technically, we should import libcrails-router's interface, but it seems
# Cheerp doesn't support that. The libraries don't actually need to be linked,
# so the best solution around this is to install dependencies one by one, and
# ensure their installed include path is visible to this package when it builds.
import intf_libs += libcrails-router%lib{crails-router}

lib{comet}: {hxx ixx txx cxx}{** -comet/version} hxx{comet/version} $impl_libs $intf_libs

hxx{version}: in{version} $src_root/manifest

hxx{export}@./: cxx.importable = false

cxx.poptions =+ -target cheerp-genericjs
cxx.poptions =+ -D__CHEERP_CLIENT__
cxx.poptions =+ "-I$out_root" "-I$src_root"

{hbmia obja}{*}: cxx.poptions += -DLIBCOMET_STATIC_BUILD
{hbmis objs}{*}: cxx.poptions += -DLIBCOMET_SHARED_BUILD

lib{comet}:
{
  cxx.export.poptions = -target cheerp-genericjs -D__CHEERP_CLIENT__ "-I$out_root/libcomet/" "-I$src_root/libcomet/"
  cxx.export.libs = $intf_libs
}

liba{comet}: cxx.export.poptions += -DLIBCOMET_STATIC
libs{comet}: cxx.export.poptions += -DLIBCOMET_SHARED

if $version.pre_release
  lib{comet}: bin.lib.version = "-$version.project_id"
else
  lib{comet}: bin.lib.version = "-$version.major.$version.minor"

{hxx ixx txx}{*}:
{
  install         = include/
  install.subdirs = true
}
